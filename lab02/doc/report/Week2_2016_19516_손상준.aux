\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\@writefile{toc}{\contentsline {section}{\numberline {1}MV Multiplication}{1}{section.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces MNIST MLP에 각각의 layer 사이의 perceptron 간 모든 연결에 대한 weight matrix와 이전 layer까지 연산된 벡터와의 곱셈이 이뤄진다. 빨간색으로 표시된 부분에서 1200 x 1200 크기의 행렬과 1200 크기의 벡터와의 가장 큰 연산이 이뤄진다. }}{1}{figure.1}\protected@file@percent }
\newlabel{fig1}{{1}{1}{MNIST MLP에 각각의 layer 사이의 perceptron 간 모든 연결에 대한 weight matrix와 이전 layer까지 연산된 벡터와의 곱셈이 이뤄진다. 빨간색으로 표시된 부분에서 1200 x 1200 크기의 행렬과 1200 크기의 벡터와의 가장 큰 연산이 이뤄진다}{figure.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Tiling method: 큰 행렬과 벡터 연산에 있어서 작은 영역으로 나누어 이에 대한 행렬 벡터 곱셈을 진행한 후 차곡차곡 더하는 과정을 진행하게 된다. 이 때 행렬에서 일정한 부분으로 자른 조각의 크기는 $M_{SIZE}$ x $V_{SIZE}$ 이다. 위의 경우 $M_{SIZE} = V_{SIZE} = 64$ 이다.}}{2}{figure.2}\protected@file@percent }
\newlabel{fig2}{{2}{2}{Tiling method: 큰 행렬과 벡터 연산에 있어서 작은 영역으로 나누어 이에 대한 행렬 벡터 곱셈을 진행한 후 차곡차곡 더하는 과정을 진행하게 된다. 이 때 행렬에서 일정한 부분으로 자른 조각의 크기는 $M_{SIZE}$ x $V_{SIZE}$ 이다. 위의 경우 $M_{SIZE} = V_{SIZE} = 64$ 이다}{figure.2}{}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Implementation}{2}{section.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Initialize input vector}{2}{subsection.2.1}\protected@file@percent }
\newlabel{sec:initialize}{{2.1}{2}{Initialize input vector}{subsection.2.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Assign a vector}{2}{subsection.2.2}\protected@file@percent }
\newlabel{sec:vector}{{2.2}{2}{Assign a vector}{subsection.2.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3}Assign a matrix}{3}{subsection.2.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4}Execute block MV multiplication \& Accumulate intermediate results}{3}{subsection.2.4}\protected@file@percent }
\newlabel{sec:accumulate}{{2.4}{3}{Execute block MV multiplication \& Accumulate intermediate results}{subsection.2.4}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Experiment}{3}{section.3}\protected@file@percent }
\newlabel{eqn1}{{1}{3}{Experiment}{equation.3.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Result without Tiling}}{3}{figure.3}\protected@file@percent }
\newlabel{fig3}{{3}{3}{Result without Tiling}{figure.3}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Result with (64, 64), (16, 16), (8, 16), (16, 8) Tiling}}{4}{figure.4}\protected@file@percent }
\newlabel{fig4}{{4}{4}{Result with (64, 64), (16, 16), (8, 16), (16, 8) Tiling}{figure.4}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces 한 대의 머신에서 $M_{SIZE}$와 $V_{SIZE}$를 변화하였을 때 걸리는 시간을 비교한 결과이며 단순히 block 크기를 키우거나 줄인다고 연산 속도가 개선되거나 오래 걸리지 않음을 확인할 수 있다.}}{5}{figure.5}\protected@file@percent }
\newlabel{fig7}{{5}{5}{한 대의 머신에서 $M_{SIZE}$와 $V_{SIZE}$를 변화하였을 때 걸리는 시간을 비교한 결과이며 단순히 block 크기를 키우거나 줄인다고 연산 속도가 개선되거나 오래 걸리지 않음을 확인할 수 있다}{figure.5}{}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Conclusion}{5}{section.4}\protected@file@percent }
\gdef \@abspage@last{5}
